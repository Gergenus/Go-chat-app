// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	mock "github.com/stretchr/testify/mock"
)

// NewAuthMock creates a new instance of AuthMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthMock {
	mock := &AuthMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthMock is an autogenerated mock type for the Auth type
type AuthMock struct {
	mock.Mock
}

type AuthMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthMock) EXPECT() *AuthMock_Expecter {
	return &AuthMock_Expecter{mock: &_m.Mock}
}

// SignIn provides a mock function for the type AuthMock
func (_mock *AuthMock) SignIn(name string, password string) (string, error) {
	ret := _mock.Called(name, password)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(name, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(name, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(name, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthMock_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type AuthMock_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - name
//   - password
func (_e *AuthMock_Expecter) SignIn(name interface{}, password interface{}) *AuthMock_SignIn_Call {
	return &AuthMock_SignIn_Call{Call: _e.mock.On("SignIn", name, password)}
}

func (_c *AuthMock_SignIn_Call) Run(run func(name string, password string)) *AuthMock_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AuthMock_SignIn_Call) Return(s string, err error) *AuthMock_SignIn_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AuthMock_SignIn_Call) RunAndReturn(run func(name string, password string) (string, error)) *AuthMock_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function for the type AuthMock
func (_mock *AuthMock) SignUp(name string, email string, password string) (int, error) {
	ret := _mock.Called(name, email, password)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (int, error)); ok {
		return returnFunc(name, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) int); ok {
		r0 = returnFunc(name, email, password)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(name, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthMock_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type AuthMock_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - name
//   - email
//   - password
func (_e *AuthMock_Expecter) SignUp(name interface{}, email interface{}, password interface{}) *AuthMock_SignUp_Call {
	return &AuthMock_SignUp_Call{Call: _e.mock.On("SignUp", name, email, password)}
}

func (_c *AuthMock_SignUp_Call) Run(run func(name string, email string, password string)) *AuthMock_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthMock_SignUp_Call) Return(n int, err error) *AuthMock_SignUp_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *AuthMock_SignUp_Call) RunAndReturn(run func(name string, email string, password string) (int, error)) *AuthMock_SignUp_Call {
	_c.Call.Return(run)
	return _c
}
